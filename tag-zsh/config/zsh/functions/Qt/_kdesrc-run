#compdef kdesrc-run

local exec_cmd i ret=1

_kdesrc_build_modules() {
  typeset -agU kdesrc_build_modules
  if _cache_invalid kdesrc_build_modules || ! _retrieve_cache kdesrc_build_modules
  then
    # [1,-2] is a slice that removes last element (count is 1-based in zsh).
    # Then strip " -- " prefix and " *" suffix (i.e. everything after and including first whitespace).
    # (@) array Expansion Flags are needed because we need to operate on each element separately.
    kdesrc_build_modules=( "${(@)${(@)${(@)${(f)"$(
      _call_program kdesrc-build-modules \
        kdesrc-build --list-build --no-src
      )"}[1,-2]}# ── }%% *}" )
    _store_cache kdesrc_build_modules kdesrc_build_modules
  fi
  _wanted modules expl 'module' \
    compadd -a kdesrc_build_modules && ret=0
}

for (( i = 1; i <= ${#words}; i++ )); do
  case $words[$i] in
    -e=*|--exec=*)
      exec_cmd="${${words[$i]}#*=}"
      break
      ;;
    -e|--exec)
      (( i += 1 ))
      exec_cmd="${words[$i]}"
      break
      ;;
  esac
done

_kdesrc_run_precommand() {
  local module

  # force zsh into thinking that we are now completing opitons for $exec_cmd
  if [[ -n "$exec_cmd" ]]; then
    module=${words[1]}
    words[1]=$exec_cmd
    line=${line:/$module/$exec_cmd}
  fi

  _normal
}

_arguments -C -s -S \
  '(--list-installed -e --exec)'{-e=,--exec=}'[Specify program of the module. Default to module name.]:::_command_names -e' \
  '(--list-installed -f --fork)'{-f,--fork}'[Launch the program in a new session]' \
  '(-q --quiet)'{-q,--quiet}'[Do not print run information]' \
  '(-h --help)'{-h,--help}'[Print usage information and exit]' \
  '(-)--list-installed[Print installed modules and exit]' \
  '(-)1: :_kdesrc_build_modules' \
  '*:: :_kdesrc_run_precommand' \
  && ret=0

return $ret
