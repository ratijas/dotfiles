#compdef kscreen-doctor

local curcontext="$curcontext" state expl

_kscreen-doctor-outputs() {
  local -a outputs  # array of 3-tuples: id, name, enabled status (true/false)
  outputs=(${(f)"$(
    kscreen-doctor --json |
    jq --raw-output '
        .outputs |
        map(select(.connected)) |
        sort_by([.enabled | not], [.name]) |
        .[] |
        [.id, .name, .enabled] |
        .[]
    '
  )"})

  local -a completions
  local id name enabled desc
  for id name enabled in $outputs ; do
    if [[ "$enabled" == true ]]; then
      enabled="[Enabled] "  # a bit of right padding, like git does for recent commits list
    else
      enabled="[Disabled]"
    fi
    desc="$enabled Output ID $id, connected as $name"
    # Duplicate completions for id and name. But given identical description,
    # they will occupy the same row.
    completions+=( "$id:$desc" "$name:$desc" )
  done

  _describe -t outputs output completions "$@"
}

_kscreen-doctor-mode() {
  local output="$1"
  local -a modes
  # note about "\(.id)": stringifying known-to-be integer sounds safer than parsing untrusted intput as an int.
  modes=(${(f)"$(
    kscreen-doctor --json \
    | jq --raw-output --arg output "$output" '
      .outputs[] |
      select("\(.id)" == $output or .name == $output) |
      .modes[] |
      "\(.size.width)x\(.size.height)@\(.refreshRate|round)"
    '
  )"})

  _wanted modes expl mode \
    compadd -a modes
}

_arguments -C \
    '(-h --help)'{-h,--help}'[Displays help on commandline options]' \
    '--help-all[Displays help including Qt specific options]' \
    '(-i --info)'{-i,--info}'[Show runtime information: backends, logging, etc]' \
    '(-j --json)'{-j,--json}'[Show configuration in JSON format]' \
    '(-o --outputs)'{-o,--outputs}'[Show outputs]' \
    '(DPMS)'{-d=,--dpms=}'[Display power management (Wayland only)]:status:(on off)' \
    '--dpms-excluded=[Do not apply the dpms change to the output with said model names]:connector:_kscreen-doctor-outputs' \
    '(-l --log)'{-l=,--log=}'[Write a comment to the log file]:comment' \
    '*: :->settings'

case $state in
  settings)
    if compset -P 'output.' ; then

      if compset -P 1 '*.' ; then
        local output; output="${${IPREFIX#*.}%.}"

        if compset -P 1 'mode.' ; then
          _kscreen-doctor-mode "$output"
        elif compset -P 1 'rgbrange.' ; then
          _alternative 'rgbrange::(automatic full limited)'
        elif compset -P 1 'rotation.' || compset -P 1 'orientation.' ; then
          _alternative 'rotation::(none normal left right inverted)'
        elif compset -P 1 'overscan.' ; then
          local -a _kscreen_doctor_output_overscan
          _kscreen_doctor_output_overscan=(
            '0:Disable overscan (Default)'
            '3:Action safe area (Vertical, round down)'
            '4:Action safe area (Vertical, round up)'
            '10:Action safe area (Horizontal, 14:9 displayed on 16:9)'
            '15:Action safe area (Horizontal,  4:3 displayed on 16:9)'
            '17:Title safe area (Horizontal, 4:3 displayed on 16:9)'
          )
          _describe -t kscreen_doctor_output_overscan "Output overscan" _kscreen_doctor_output_overscan -o nosort
        elif compset -P 1 'scale.' ; then
          _alternative 'scale::(1 1.25 1.5 1.75 2 2.25 2.5 2.75 3)'
        elif compset -P 1 'vrrpolicy.' ; then
          _alternative 'vrrpolicy::(never always automatic)'
        else
          _describe -t subcommands subcommand '(
            enable:"Toggle output"
            disable:"Toggle output"
            primary:"Make this output primary"
          )' -- '(
            mode:"Resolution and refresh rate"
            orientation:"Display orientation"
            overscan:"Overscan area size (in %percents)"
            position:"x and y coordinates"
            rgbrange:"RGB range"
            rotation:"Display orientation"
            scale:"Per-output scaling (Wayland only)"
            vrrpolicy:"Variable refresh rate (Wayland only)"
            )' -S '.'
        fi
      else
        _kscreen-doctor-outputs -S '.'
      fi
    else
      _sep_parts '(output)' .
    fi
  ;;
esac

return 0
