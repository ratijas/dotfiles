-- OverloadedStrings is often useful.
:set -XOverloadedStrings

-- Enable multi-line expressions with :{ and :}
:set +m

-- Make the prompt a little more colorful.
-- And pretty-printing values
-- https://www.reddit.com/r/haskell/comments/144biy/pretty_output_in_ghci_howto_in_comments/
import qualified IPPrint
import qualified Language.Haskell.HsColour as HsColour
import qualified Language.Haskell.HsColour.Colourise as HsColour
import qualified Language.Haskell.HsColour.Output as HsColour

let myColourPrefs = HsColour.defaultColourPrefs {
-- 	HsColour.conid    = [HsColour.Foreground HsColour.Yellow, HsColour.Bold],
-- 	HsColour.conop    = [HsColour.Foreground HsColour.Yellow],
    HsColour.string   = [HsColour.Foreground HsColour.Green]
-- 	HsColour.char     = [HsColour.Foreground HsColour.Cyan],
-- 	HsColour.number   = [HsColour.Foreground HsColour.Red, HsColour.Bold],
-- 	HsColour.layout   = [HsColour.Foreground HsColour.White],
-- 	HsColour.keyglyph = [HsColour.Foreground HsColour.White]
}

let myPrint :: Show a => a -> IO ();
    myPrint = putStrLn . HsColour.hscolour (HsColour.TTYg HsColour.XTerm256Compatible) myColourPrefs False False "" False . IPPrint.pshow

:set -interactive-print=myPrint

-- Show the types of evaluated expressions
:set +t

-- Simple colored prompt
:set prompt      "\ESC[32m\STX   Î» \ESC[m\STX"
:set prompt-cont "\ESC[32m\STX...: \ESC[m\STX"

-- Hoogle requires $ stack install hoogle
-- Overwritten by lambdabot in ~/.ghci
-- :def hoogle \x -> return $ ":!hoogle \""        ++ x ++ "\""
-- :def doc    \x -> return $ ":!hoogle --info \"" ++ x ++ "\""

-- vim: set syntax=haskell ts=4 sw=4 sts=4 et:
